trigger:
- main
- develop
- UAT

  #paths:
    #include:
     # - ADFIntegration

  
pool:
  vmImage: 'windows-latest'
# Installs Node and the npm packages saved in your package.json file in the build
stages:
  - stage: Build_ADF
    displayName: Build ADF artifact
    jobs:
      - job: Creating
        displayName: "Creating Artifact"
        pool:
          vmImage: 'windows-latest'
        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: '14.x'
            displayName: 'Install Node.js'

          - task: Npm@1
            inputs:
              command: 'install'
              workingDir: '$(Build.Repository.LocalPath)/ADFIntegration' 
              verbose: true
            displayName: 'Install npm package'

# Validates all of the Data Factory resources in the repository. You'll get the same validation errors as when "Validate All" is selected.
# Enter the appropriate subscription and name for the source factory.

          - task: Npm@1
            inputs:
              command: 'custom'
              workingDir: '$(Build.Repository.LocalPath)/ADFIntegration' #package.json folder
              customCommand: 'run build validate $(Build.Repository.LocalPath)/ADFIntegration /subscriptions/$(subscriptionid)/resourceGroups/$(resourcegroup_dev)/providers/Microsoft.DataFactory/factories/$(adfname_dev)'
            displayName: 'Validate'

# Validate and then generate the ARM template into the destination folder, which is the same as selecting "Publish" from the UX.
# The ARM template generated isn't published to the live version of the factory. Deployment should be done by using a CI/CD pipeline. 

          - task: Npm@1
            inputs:
              command: 'custom'
              workingDir: '$(Build.Repository.LocalPath)/ADFIntegration'
              customCommand: 'run build export $(Build.Repository.LocalPath)/ADFIntegration /subscriptions/$(subscriptionid)/resourceGroups/$(resourcegroup_dev)/providers/Microsoft.DataFactory/factories/$(adfname_dev) artifacts'  
            displayName: 'Validate and Generate ARM template'

# Publish the artifact to be used as a source for a release pipeline.
          - task: CopyFiles@2
            inputs:
              SourceFolder: '$(Build.Repository.LocalPath)/ADFIntegration/artifacts'
              Contents: '**'
              TargetFolder: '$(build.artifactstagingdirectory)/application'
            displayName: 'Copying application artifact'


          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: '$(build.artifactstagingdirectory)'
              artifact: 'datafactory'
              publishLocation: 'pipeline'

      # To Know folder structure
          - powershell: |
              tree "$(build.artifactstagingdirectory)" /F
            displayName: "Treeview of build.artifactstagingdirectory"


#release pipeline
  - stage: 'UAT'
    displayName: 'UAT deploy'
    dependsOn: Build_ADF
    variables:
      dataFactoryName: $(uat_datafactoryname)
  
    jobs:
      - job: develop
        displayName: develop
        pool:
          vmImage: 'windows-latest'
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
      - deployment: DeploytoUAT
        pool:
          vmImage: 'windows-latest'
        environment: UAT
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadPipelineArtifact@2
                  inputs:
                    source: current
                    artifactName: 'datafactory'
                    targetPath: '$(Pipeline.Workspace)'
                  displayName: Downloading Artifact
        #to know folder structure
                - powershell: |
                    tree "$(Pipeline.Workspace)" /F
                    Get-Content -Path $(Pipeline.Workspace)/datafactory/application/PrePostDeploymentScript.ps1
                  displayName: 'Treeview of Pipeline.Workspace'

                - task: DownloadSecureFile@1
                  name: adfparameter
                  displayName: 'Download Parameters from secure files'
                  inputs:
                    secureFile: ARMTemplateParametersForFactoryuat.json
                - pwsh: |
                    Copy-Item "$(adfParameter.secureFilePath)" -Destination "$(Pipeline.Workspace)/datafactory/application"
                    Remove-Item ARMTemplateParametersForFactory.json
                    Rename-Item -Path ARMTemplateParametersForFactoryuat.json -NewName ARMTemplateParametersForFactory.json
                  workingDirectory: $(Pipeline.Workspace)/datafactory/application
                  displayName: Replace ARM Template Parameters
                - pwsh: |
                    (Get-Content $(Pipeline.Workspace)/datafactory/application/ARMTemplateForFactory.json) -Replace '"type": "ManagedIdentity"', '"type": "SystemAssigned"' | Set-Content $(Pipeline.Workspace)/datafactory/application/ARMTemplateForFactory.json
                  workingDirectory: $(Pipeline.Workspace)/datafactory/application
                  displayName: Replace Managed Identity to System Assigned
        #stop Trigger
                - task: AzurePowerShell@5
                  displayName: Stop Trigger
                  inputs: 
                    azureSubscription: $(myserviceconnection)
                    workingDirectory: $(Pipeline.Workspace)/datafactory/application
                    ScriptPath: '$(Pipeline.Workspace)/datafactory/application/PrePostDeploymentScript.ps1'
                    ScriptArguments: -armTemplate "$(Pipeline.Workspace)/datafactory/application/ARMTemplateForFactory.json" -ResourceGroupName $(rguatname) -DataFactoryName $(uat_datafactoryname) -predeployment $true -deleteDeployment $false
                    azurePowerShellVersion: 'LatestVersion'

                - task: AzureResourceManagerTemplateDeployment@3
                  displayName: 'Deploying to UAT RG task'
                  inputs:
                    deploymentScope: Resource Group
                    azureResourceManagerConnection: $(myserviceconnection)
                    subscriptionId: $(subscriptionid)
                    action: Create Or Update Resource Group
                    resourceGroupName: $(rguatname)
                    location: $(UATlocation)
                    templateLocation: Linked artifact
                    csmFile: '$(Pipeline.Workspace)/datafactory/application/ARMTemplateForFactory.json'
                    csmParametersFile: '$(Pipeline.Workspace)/datafactory/application/ARMTemplateParametersForFactory.json'
                    deploymentMode: Incremental
        #start Trigger
                - task: AzurePowerShell@5
                  displayName: Start Trigger
                  inputs: 
                    azureSubscription: $(myserviceconnection)
                    workingDirectory: $(Pipeline.Workspace)/datafactory/application
                    ScriptPath: '$(Pipeline.Workspace)/datafactory/application/PrePostDeploymentScript.ps1'
                    ScriptArguments: -armTemplate "$(Pipeline.Workspace)/datafactory/application/ARMTemplateForFactory.json" -ResourceGroupName $(rguatname) -DataFactoryName $(uat_datafactoryname) -predeployment $false -deleteDeployment $true
                    azurePowerShellVersion: 'LatestVersion'

#release pipeline for prod
  - stage: 'approve_deployment'
    displayName: 'Approval to Deploy to PROD'
    dependsOn: Build_ADF
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))

  - stage: 'PROD'
    displayName: 'PROD deploy'
    dependsOn: Build_ADF
    variables:
      dataFactoryName: $(prod_datafactoryname)
  
    jobs:
      - deployment: prod #job: prod
        displayName: prod
        pool:
          vmImage: 'windows-latest'
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))

      - deployment: DeploytoPROD
        pool:
          vmImage: 'windows-latest'
        environment: PROD
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadPipelineArtifact@2
                  inputs:
                    source: current
                    artifactName: 'datafactory'
                    targetPath: '$(Pipeline.Workspace)'
                  displayName: Downloading Artifact
        #to know folder structure
                - powershell: |
                    tree "$(Pipeline.Workspace)" /F
                    Get-Content -Path $(Pipeline.Workspace)/datafactory/application/PrePostDeploymentScript.ps1
                  displayName: 'Treeview of Pipeline.Workspace'

                - task: DownloadSecureFile@1
                  name: adfparameter
                  displayName: 'Download Parameters from secure files'
                  inputs:
                    secureFile: ARMTemplateParametersForFactoryprod.json
                - pwsh: |
                    Copy-Item "$(adfParameter.secureFilePath)" -Destination "$(Pipeline.Workspace)/datafactory/application"
                    Remove-Item ARMTemplateParametersForFactory.json
                    Rename-Item -Path ARMTemplateParametersForFactoryprod.json -NewName ARMTemplateParametersForFactory.json
                  workingDirectory: $(Pipeline.Workspace)/datafactory/application
                  displayName: Replace ARM Template Parameters
                - pwsh: |
                    (Get-Content $(Pipeline.Workspace)/datafactory/application/ARMTemplateForFactory.json) -Replace '"type": "ManagedIdentity"', '"type": "SystemAssigned"' | Set-Content $(Pipeline.Workspace)/datafactory/application/ARMTemplateForFactory.json
                  workingDirectory: $(Pipeline.Workspace)/datafactory/application
                  displayName: Replace Managed Identity to System Assigned
        #stop Trigger
                - task: AzurePowerShell@5
                  displayName: Stop Trigger
                  inputs: 
                    azureSubscription: $(myserviceconnection)
                    workingDirectory: $(Pipeline.Workspace)/datafactory/application
                    ScriptPath: '$(Pipeline.Workspace)/datafactory/application/PrePostDeploymentScript.ps1'
                    ScriptArguments: -armTemplate "$(Pipeline.Workspace)/datafactory/application/ARMTemplateForFactory.json" -ResourceGroupName $(rgprodname) -DataFactoryName $(prod_datafactoryname) -predeployment $true -deleteDeployment $false
                    azurePowerShellVersion: 'LatestVersion'

                - task: AzureResourceManagerTemplateDeployment@3
                  displayName: 'Deploying to PROD RG task'
                  inputs:
                    deploymentScope: Resource Group
                    azureResourceManagerConnection: $(myserviceconnection)
                    subscriptionId: $(subscriptionid)
                    action: Create Or Update Resource Group
                    resourceGroupName: $(rgprodname)
                    location: $(PRODlocation)
                    templateLocation: Linked artifact
                    csmFile: '$(Pipeline.Workspace)/datafactory/application/ARMTemplateForFactory.json'
                    csmParametersFile: '$(Pipeline.Workspace)/datafactory/application/ARMTemplateParametersForFactory.json'
                    deploymentMode: Incremental
        #start Trigger
                - task: AzurePowerShell@5
                  displayName: Start Trigger
                  inputs: 
                    azureSubscription: $(myserviceconnection)
                    workingDirectory: $(Pipeline.Workspace)/datafactory/application
                    ScriptPath: '$(Pipeline.Workspace)/datafactory/application/PrePostDeploymentScript.ps1'
                    ScriptArguments: -armTemplate "$(Pipeline.Workspace)/datafactory/application/ARMTemplateForFactory.json" -ResourceGroupName $(rgprodname) -DataFactoryName $(prod_datafactoryname) -predeployment $false -deleteDeployment $true
                    azurePowerShellVersion: 'LatestVersion'
                    
            
            


    